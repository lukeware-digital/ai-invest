"""
CeciAI - Agent 4: Candlestick Specialist
Especialista em an√°lise de padr√µes de candlestick

Responsabilidades:
- Detectar padr√µes de candlestick
- Avaliar for√ßa e confiabilidade dos padr√µes
- Fornecer sinais de trading baseados em padr√µes
- Integrar com LLM para an√°lise contextual

Autor: CeciAI Team
Data: 2025-10-07
"""

import json
import logging
from typing import Any

import ollama
import pandas as pd

from utils.candlestick_patterns import CandlestickPatternDetector

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class CandlestickSpecialist:
    """
    Agent 4: Especialista em Padr√µes de Candlestick

    Analisa padr√µes de candles e fornece sinais de trading.
    """

    def __init__(self, model: str = "llama3.2:3b"):
        """
        Inicializa o agente.

        Args:
            model: Modelo Ollama a usar
        """
        self.model = model
        self.detector = CandlestickPatternDetector()
        logger.info(f"Agent 4 inicializado com modelo {model}")

    async def analyze(
        self, df: pd.DataFrame, context: dict[str, Any] | None = None
    ) -> dict[str, Any]:
        """
        Analisa padr√µes de candlestick.

        Args:
            df: DataFrame com dados OHLCV
            context: Contexto adicional (tend√™ncia, volume, etc)

        Returns:
            Dict com an√°lise e recomenda√ß√£o
        """
        if context is None:
            context = {}

        try:
            # Detectar padr√µes
            patterns = self.detector.detect_all_patterns(df)
            strength = self.detector.calculate_pattern_strength(patterns)
            summary = self.detector.generate_summary(patterns)

            logger.info(f"Detectados {len(patterns)} padr√µes de candlestick")

            # Preparar prompt para LLM
            prompt = self._build_prompt(df, patterns, strength, context)

            # Consultar LLM
            response = ollama.generate(model=self.model, prompt=prompt, format="json")

            # Parsear resposta
            analysis = self._parse_response(response["response"])

            # Adicionar dados t√©cnicos
            analysis["patterns_detected"] = len(patterns)
            analysis["pattern_strength"] = strength
            analysis["pattern_summary"] = summary
            analysis["agent"] = "agent_4_candlestick"

            logger.info(
                f"An√°lise completa: {analysis['signal']} (confian√ßa: {analysis['confidence']:.2f})"
            )

            return analysis

        except Exception as e:
            logger.error(f"Erro na an√°lise: {e}", exc_info=True)
            return self._get_default_response(str(e))

    def _build_prompt(self, df: pd.DataFrame, patterns: list, strength: dict, context: dict) -> str:
        """Constr√≥i prompt para o LLM"""

        latest_candle = df.iloc[-1]

        prompt = f"""
Voc√™ √© um especialista em an√°lise de padr√µes de candlestick com 20 anos de experi√™ncia em trading.

DADOS DO MERCADO:
- S√≠mbolo: {context.get('symbol', 'N/A')}
- Pre√ßo Atual: ${latest_candle['close']:.2f}
- Tend√™ncia: {context.get('trend', 'N/A')}
- Volume: {latest_candle.get('volume', 'N/A')}
- Varia√ß√£o 24h: {((latest_candle['close'] - df.iloc[-24]['close']) / df.iloc[-24]['close'] * 100) if len(df) >= 24 else 0:.2f}%

PADR√ïES DETECTADOS:
{self.detector.generate_summary(patterns)}

FOR√áA DOS PADR√ïES:
- Score Bullish: {strength['bullish_score']:.2f}
- Score Bearish: {strength['bearish_score']:.2f}
- Confian√ßa: {strength['confidence']}
- Sinal Dominante: {strength['dominant_signal']}

TAREFA:
Analise os padr√µes de candlestick detectados e forne√ßa uma recomenda√ß√£o de trading precisa.

Considere:
1. A for√ßa e confiabilidade dos padr√µes
2. O contexto de mercado (tend√™ncia, volume)
3. Se os padr√µes confirmam ou contradizem a tend√™ncia
4. Necessidade de confirma√ß√£o
5. Hist√≥rico de acur√°cia de cada padr√£o

RESPONDA EM JSON (sem markdown, apenas JSON puro):
{{
  "signal": "BUY|SELL|HOLD",
  "confidence": 0.XX,
  "reasoning": "Explica√ß√£o detalhada da an√°lise em 2-3 frases",
  "key_patterns": ["Lista dos 3 padr√µes mais importantes"],
  "confirmation_needed": true|false,
  "confirmation_criteria": "O que observar para confirmar",
  "risk_level": "LOW|MEDIUM|HIGH",
  "timeframe_recommendation": "SCALPING|SWING|HOLD"
}}
"""
        return prompt

    def _parse_response(self, response: str) -> dict:
        """Parseia resposta do LLM"""
        try:
            # Remover markdown se presente
            response = response.strip()
            if response.startswith("```"):
                response = response.split("```")[1]
                if response.startswith("json"):
                    response = response[4:]

            return json.loads(response)

        except Exception as e:
            logger.error(f"Erro ao parsear resposta: {e}")
            return {
                "signal": "HOLD",
                "confidence": 0.5,
                "reasoning": f"Erro ao parsear resposta do LLM: {e!s}",
                "key_patterns": [],
                "confirmation_needed": True,
                "confirmation_criteria": "Aguardar pr√≥ximo candle",
                "risk_level": "HIGH",
                "timeframe_recommendation": "HOLD",
            }

    def _get_default_response(self, error_msg: str) -> dict:
        """Retorna resposta padr√£o em caso de erro"""
        return {
            "signal": "HOLD",
            "confidence": 0.0,
            "reasoning": f"Erro na an√°lise: {error_msg}",
            "key_patterns": [],
            "confirmation_needed": True,
            "confirmation_criteria": "Sistema indispon√≠vel",
            "risk_level": "HIGH",
            "timeframe_recommendation": "HOLD",
            "patterns_detected": 0,
            "pattern_strength": {
                "bullish_score": 0,
                "bearish_score": 0,
                "confidence": "LOW",
                "dominant_signal": "HOLD",
            },
            "pattern_summary": "Erro na detec√ß√£o de padr√µes",
            "agent": "agent_4_candlestick",
            "error": error_msg,
        }


# Exemplo de uso
if __name__ == "__main__":
    import asyncio

    async def test_agent():
        # Dados de teste
        data = {
            "open": [100, 102, 101, 103, 102],
            "high": [105, 106, 104, 107, 106],
            "low": [99, 101, 100, 102, 101],
            "close": [103, 101, 103, 102, 105],
            "volume": [1000, 1100, 950, 1200, 1050],
        }
        df = pd.DataFrame(data)

        agent = CandlestickSpecialist()
        result = await agent.analyze(df, {"symbol": "BTC/USD", "trend": "uptrend"})

        print("\nüìä RESULTADO DA AN√ÅLISE:")
        print(json.dumps(result, indent=2))

    asyncio.run(test_agent())
